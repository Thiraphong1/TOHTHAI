generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String?
  name      String?
  pictures  String?
  role      String   @default("user")
  enabled   Boolean  @default(true)
  orders    Order[]
  cart      Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  price       Float
  sold        Int              @default(0)
  quantity    Int
  orderItems  ProductonOrder[]
  cartItems   ProductonCart[]
  images      Image[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model Order {
  id             Int              @id @default(autoincrement())
  products       ProductonOrder[]
  cartTotal      Float
  orderStatus    String           @default("Not Processed")
  orderedBy      User             @relation(fields: [orderedById], references: [id], onDelete: Cascade)
  orderedById    Int
  stripePaymentId String?
  table          Table?           @relation(fields: [tableId], references: [id])
  tableId        Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}


model ProductonOrder {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id          Int             @id @default(autoincrement())
  products    ProductonCart[]
  cartTotal   Float
  orderedBy   User            @relation(fields: [orderedById], references: [id], onDelete: Cascade)
  orderedById Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProductonCart {
  id     Int  @id @default(autoincrement())
  cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
  count     Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Table {
  id        Int      @id @default(autoincrement())
  number    String   @unique          // หมายเลขโต๊ะ เช่น T1, T2
  capacity  Int
  status    String   @default("available") // available, occupied
  orders    Order[]  // ความสัมพันธ์กับคำสั่งซื้อ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
